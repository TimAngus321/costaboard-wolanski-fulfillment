'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.OrderUploadTimeKeeper = undefined;var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);var _createClass2 = require('babel-runtime/helpers/createClass');var _createClass3 = _interopRequireDefault(_createClass2);var _timeHelper = require('../../util/timeHelper');function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}var

OrderUploadTimeKeeper = exports.OrderUploadTimeKeeper = function () {
  function OrderUploadTimeKeeper(targetUploadTimeHour, targetUploadTimeMinute, bufferTimeBeforeForLastOrderBeforeTargetExecutionTime) {(0, _classCallCheck3.default)(this, OrderUploadTimeKeeper);
    this.targetUploadTimeHour = targetUploadTimeHour || process.env.ORDER_UPLOAD_EXECUTION_TIME_HOUR || 12;
    this.targetUploadTimeMin = targetUploadTimeMinute || process.env.ORDER_UPLOAD_EXECUTION_TIME_MIN || 0;
    this.bufferTimeBeforeForLastOrderBeforeTargetExecutionTime =
    bufferTimeBeforeForLastOrderBeforeTargetExecutionTime ||
    process.env.ORDER_UPLOAD_BUFFER_TIME_FOR_LAST_ORDER_BEFORE_EXECUTION_TIME_MIN ||
    30;
  }(0, _createClass3.default)(OrderUploadTimeKeeper, [{ key: 'isTimeForTask', value: function isTimeForTask()

    {
      return (0, _timeHelper.isTimeForTask)(this.targetUploadTimeHour, this.targetUploadTimeMin);
    } }, { key: 'previousTimeIntervallStart', value: function previousTimeIntervallStart()

    {
      return this.previousTimeIntervallEnd().subtract(1, 'd');
    } }, { key: 'previousTimeIntervallEnd', value: function previousTimeIntervallEnd()

    {
      return (0, _timeHelper.getLocalTime)().
      startOf('day').
      hour(this.targetUploadTimeHour).
      minute(this.targetUploadTimeMin).
      subtract(this.bufferTimeBeforeForLastOrderBeforeTargetExecutionTime, 'minutes');
    } }]);return OrderUploadTimeKeeper;}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9vcmRlclVwbG9hZC90aW1lS2VlcGVyL29yZGVyVXBsb2FkLnRpbWVLZWVwZXIuanMiXSwibmFtZXMiOlsiT3JkZXJVcGxvYWRUaW1lS2VlcGVyIiwidGFyZ2V0VXBsb2FkVGltZUhvdXIiLCJ0YXJnZXRVcGxvYWRUaW1lTWludXRlIiwiYnVmZmVyVGltZUJlZm9yZUZvckxhc3RPcmRlckJlZm9yZVRhcmdldEV4ZWN1dGlvblRpbWUiLCJwcm9jZXNzIiwiZW52IiwiT1JERVJfVVBMT0FEX0VYRUNVVElPTl9USU1FX0hPVVIiLCJ0YXJnZXRVcGxvYWRUaW1lTWluIiwiT1JERVJfVVBMT0FEX0VYRUNVVElPTl9USU1FX01JTiIsIk9SREVSX1VQTE9BRF9CVUZGRVJfVElNRV9GT1JfTEFTVF9PUkRFUl9CRUZPUkVfRVhFQ1VUSU9OX1RJTUVfTUlOIiwicHJldmlvdXNUaW1lSW50ZXJ2YWxsRW5kIiwic3VidHJhY3QiLCJzdGFydE9mIiwiaG91ciIsIm1pbnV0ZSJdLCJtYXBwaW5ncyI6InVYQUFBLG1EOztBQUVhQSxxQixXQUFBQSxxQjtBQUNYLGlDQUFZQyxvQkFBWixFQUFrQ0Msc0JBQWxDLEVBQTBEQyxxREFBMUQsRUFBaUg7QUFDL0csU0FBS0Ysb0JBQUwsR0FBNEJBLHdCQUF3QkcsUUFBUUMsR0FBUixDQUFZQyxnQ0FBcEMsSUFBd0UsRUFBcEc7QUFDQSxTQUFLQyxtQkFBTCxHQUEyQkwsMEJBQTBCRSxRQUFRQyxHQUFSLENBQVlHLCtCQUF0QyxJQUF5RSxDQUFwRztBQUNBLFNBQUtMLHFEQUFMO0FBQ0VBO0FBQ0FDLFlBQVFDLEdBQVIsQ0FBWUksaUVBRFo7QUFFQSxNQUhGO0FBSUQsRzs7QUFFZTtBQUNkLGFBQU8sK0JBQWMsS0FBS1Isb0JBQW5CLEVBQXlDLEtBQUtNLG1CQUE5QyxDQUFQO0FBQ0QsSzs7QUFFNEI7QUFDM0IsYUFBTyxLQUFLRyx3QkFBTCxHQUFnQ0MsUUFBaEMsQ0FBeUMsQ0FBekMsRUFBNEMsR0FBNUMsQ0FBUDtBQUNELEs7O0FBRTBCO0FBQ3pCLGFBQU87QUFDSkMsYUFESSxDQUNJLEtBREo7QUFFSkMsVUFGSSxDQUVDLEtBQUtaLG9CQUZOO0FBR0phLFlBSEksQ0FHRyxLQUFLUCxtQkFIUjtBQUlKSSxjQUpJLENBSUssS0FBS1IscURBSlYsRUFJaUUsU0FKakUsQ0FBUDtBQUtELEsiLCJmaWxlIjoib3JkZXJVcGxvYWQudGltZUtlZXBlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldExvY2FsVGltZSwgaXNUaW1lRm9yVGFzayB9IGZyb20gJy4uLy4uL3V0aWwvdGltZUhlbHBlcic7XG5cbmV4cG9ydCBjbGFzcyBPcmRlclVwbG9hZFRpbWVLZWVwZXIge1xuICBjb25zdHJ1Y3Rvcih0YXJnZXRVcGxvYWRUaW1lSG91ciwgdGFyZ2V0VXBsb2FkVGltZU1pbnV0ZSwgYnVmZmVyVGltZUJlZm9yZUZvckxhc3RPcmRlckJlZm9yZVRhcmdldEV4ZWN1dGlvblRpbWUpIHtcbiAgICB0aGlzLnRhcmdldFVwbG9hZFRpbWVIb3VyID0gdGFyZ2V0VXBsb2FkVGltZUhvdXIgfHwgcHJvY2Vzcy5lbnYuT1JERVJfVVBMT0FEX0VYRUNVVElPTl9USU1FX0hPVVIgfHwgMTI7XG4gICAgdGhpcy50YXJnZXRVcGxvYWRUaW1lTWluID0gdGFyZ2V0VXBsb2FkVGltZU1pbnV0ZSB8fCBwcm9jZXNzLmVudi5PUkRFUl9VUExPQURfRVhFQ1VUSU9OX1RJTUVfTUlOIHx8IDA7XG4gICAgdGhpcy5idWZmZXJUaW1lQmVmb3JlRm9yTGFzdE9yZGVyQmVmb3JlVGFyZ2V0RXhlY3V0aW9uVGltZSA9XG4gICAgICBidWZmZXJUaW1lQmVmb3JlRm9yTGFzdE9yZGVyQmVmb3JlVGFyZ2V0RXhlY3V0aW9uVGltZSB8fFxuICAgICAgcHJvY2Vzcy5lbnYuT1JERVJfVVBMT0FEX0JVRkZFUl9USU1FX0ZPUl9MQVNUX09SREVSX0JFRk9SRV9FWEVDVVRJT05fVElNRV9NSU4gfHxcbiAgICAgIDMwO1xuICB9XG5cbiAgaXNUaW1lRm9yVGFzaygpIHtcbiAgICByZXR1cm4gaXNUaW1lRm9yVGFzayh0aGlzLnRhcmdldFVwbG9hZFRpbWVIb3VyLCB0aGlzLnRhcmdldFVwbG9hZFRpbWVNaW4pO1xuICB9XG5cbiAgcHJldmlvdXNUaW1lSW50ZXJ2YWxsU3RhcnQoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJldmlvdXNUaW1lSW50ZXJ2YWxsRW5kKCkuc3VidHJhY3QoMSwgJ2QnKTtcbiAgfVxuXG4gIHByZXZpb3VzVGltZUludGVydmFsbEVuZCgpIHtcbiAgICByZXR1cm4gZ2V0TG9jYWxUaW1lKClcbiAgICAgIC5zdGFydE9mKCdkYXknKVxuICAgICAgLmhvdXIodGhpcy50YXJnZXRVcGxvYWRUaW1lSG91cilcbiAgICAgIC5taW51dGUodGhpcy50YXJnZXRVcGxvYWRUaW1lTWluKVxuICAgICAgLnN1YnRyYWN0KHRoaXMuYnVmZmVyVGltZUJlZm9yZUZvckxhc3RPcmRlckJlZm9yZVRhcmdldEV4ZWN1dGlvblRpbWUsICdtaW51dGVzJyk7XG4gIH1cbn1cbiJdfQ==